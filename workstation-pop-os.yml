---
- hosts: 127.0.0.1
  connection: local
  become: true
  become_user: root
  become_method: sudo
  # Use --ask-become-pass at command line to give sudo password

  vars:
    pop_os_release: ansible_distribution_release
    user_dir: "{{ lookup('env','HOME') }}"
    user: "{{ lookup('env','USER') }}"
    src_dir: "{{ user_dir }}/{{ relative_dir }}"

  tasks:
    ### SET ENVIRONMENT

    - name: include package names to be installed
      include_vars:
        file: packages.yml
      tags: always

    - name: ensures pre configuration packages are present
      apt:
        name: "{{ pre_config_packages }}"
      tags: always

    ### APT REPOS CONFIGURATION PHASE

    - name: ensures ppas are present
      apt_repository:
        repo: "{{ item }}"
        state: present
        validate_certs: false
      with_items: "{{ ppas }}"
      tags: repository_configuration

    - name: ensures repositories gpg keys are present (using key file)
      apt_key:
        url: "{{ item.url }}"
        keyring: "{{ item.keyring }}"
        validate_certs: "{{ item.validate_certs }}"
      loop: "{{ apt_sources|rejectattr('url', 'undefined')|list }}"
      tags: repository_configuration

    - name: ensures repositories gpg keys are present (using key id)
      apt_key:
        id: "{{ item.id }}"
        keyserver: "{{ item.keyserver }}"
        validate_certs: "{{ item.validate_certs }}"
      loop: "{{ apt_sources|rejectattr('id', 'undefined')|list }}"
      tags: repository_configuration

    - name: ensures listed repositories are present
      apt_repository:
        repo: "{{ item.repo }}"
        filename: "{{ item.filename }}"
        update_cache: false
      loop: "{{ apt_sources }}"
      tags: repository_configuration

    - name: ensures pop-os supports i386 architecture packages (for Steam Proton)
      command: dpkg --add-architecture i386
      changed_when: false
      tags: repository_configuration

    - name: ensures added PPAs and repos are cached
      apt: update_cache=yes
      tags: repository_configuration

    ### PACKAGES INSTALLATION PHASE

    - name: ensures nodejs dependencies are installed
      apt:
        name: "{{ node_dependencies }}"
      tags: package_installation

    - name: updates npm
      npm:
        name: npm
        global: true
        state: present
      tags: package_installation

    - name: ensures python packages are installed
      apt:
        name: "{{ python_dependencies }}"
      tags: package_installation

    - name: ensures pypi packages are installed (looong task, includes numpy, scipy, tensorflow and others)
      pip:
        executable: "/usr/bin/pip3"
        name: "{{ pypi_packages }}"
      tags: package_installation

    - name: ensures backup packages are installed
      apt:
        name: "{{ backup_packages }}"
      tags: package_installation

    - name: ensures browser packages are installed
      apt:
        name: "{{ browser_packages }}"
      tags: package_installation

    - name: ensures system tools packages are installed [long task part 1]
      apt:
        name: "{{ system_tools_packages_1 }}"
      tags: package_installation

    - name: ensures system tools packages are installed [long task part 2]
      apt:
        name: "{{ system_tools_packages_2 }}"
      tags: package_installation

    - name: ensures desktop packages are installed [part 1]
      apt:
        name: "{{ desktop_packages_1 }}"
      tags: package_installation

    - name: ensures desktop packages are installed [part 2]
      apt:
        name: "{{ desktop_packages_2 }}"
      tags: package_installation

    - name: ensures devel libs are installed [long task part 1]
      apt:
        name: "{{ devel_libs_1 }}"
      tags: package_installation

    - name: ensures devel libs are installed [long task part 2]
      apt:
        name: "{{ devel_libs_2 }}"
      tags: package_installation

    - name: ensures devel packages are installed [long task part 1]
      apt:
        name: "{{ devel_packages_1 }}"
      tags: package_installation

    - name: ensures devel packages are installed [long task part 2]
      apt:
        name: "{{ devel_packages_2 }}"
      tags: package_installation

    - name: ensures packages that needs dpkg --force-overwrite are installed
      apt:
        name: "{{ dpkg_force_overwrite_packages }}"
        dpkg_options: "force-confdef,force-confold,force-overwrite"
      tags: package_installation

    - name: ensures elixir dependencies are installed
      apt:
        name: "{{ elixir_dependencies }}"
      tags: package_installation

    - name: ensures font packages are installed
      apt:
        name: "{{ font_packages }}"
      tags: package_installation

    - name: ensures image packages are installed
      apt:
        name: "{{ image_packages }}"
      tags: package_installation

    - name: ensures java packages are installed [long task]
      apt:
        name: "{{ java_packages }}"
      tags: package_installation

    - name: ensures node dependencies are installed
      apt:
        name: "{{ node_dependencies }}"
      tags: package_installation

    - name: ensures postgresql packages are installed [long task]
      apt:
        name: "{{ postgresql_packages }}"
      tags: package_installation

    - name: verifies if this computer has a battery
      shell: >
        set -o pipefail &&
        upower -i `upower -e | grep 'BAT'`
      args:
        executable: /bin/bash
      register: battery
      changed_when: false
      tags: package_installation

    - name: ensures virtualization packages are installed [long task]
      apt:
        name: "{{ virtualization_packages }}"
      tags: package_installation

    - name: ensures fonts-doid-fallback is not present
      apt:
        name: fonts-droid-fallback
        state: absent
      tags: package_installation

    - name: ensures single .deb packages are downloaded and installed
      apt:
        deb: "{{ item.package }}"
        allow_unauthenticated: "{{ 'yes' if item.check_gpg == 'no' else 'no'}}"
        force: "{{ 'yes' if item.check_gpg == 'no' else 'no'}}"
      with_items: "{{ deb_packages }}"
      ignore_errors: true
      tags: package_installation

    - name: ensures elixir dependencies packages are installed
      apt:
        name: "{{ elixir_dependencies }}"
      tags: package_installation

    - name: ensures vpn dependencies are installed
      apt:
        name: "{{ vpn_dependencies }}"
      tags: package_installation

    # npm package installation

    - name: ensures npm packages are installed
      npm:
        name: "{{ item.name }}"
        production: "{{ item.production }}"
        global: true
      with_items: "{{ npm_packages }}"
      tags: package_installation

    ### BINARIES INSTALLATION

    # fonts installation

    - name: ensures all needed TTF fonts are present
      copy:
        src: "{{ src_dir }}/files/fonts/truetype/"
        dest: /usr/share/fonts/truetype
        force: true
        remote_src: true
        mode: preserve
      register: fonts_ttf
      tags: bin_installation

    - name: ensures all needed OTF fonts are present
      copy:
        src: "{{ src_dir }}/files/fonts/opentype/"
        dest: /usr/share/fonts/opentype
        force: true
        remote_src: true
        mode: preserve
      register: fonts_otf
      tags: bin_installation

    - name: remove some fonts
      shell: >
        set -o pipefail &&
        for directory in $(fc-list | grep -E '\/Noto[A-Z]' | awk -F '/Noto' '{$NF=""; print $0}' | sort | uniq | tr "\n" " "); do
          ls $directory |
          awk -F '-' '{print $1}' |
          awk '{ gsub("/^NotoSerif|^NotoSans|^NotoColorEmoji.+|^NotoMusic.+|.+Symbols.*|.+Math.*|.+Gothic.+|Noto|Mono|CJK|Serif","");
                 if ($0 ~ /^[A-Za-z]/) { print }}' |
          xargs -I % find $directory -name "Noto*%*" |
          xargs rm -f ;
        done
      args:
        executable: /bin/bash
      tags: bin_installation

    - name: ensures all needed fonts are configured
      command: fc-cache -f -v
      when: fonts_ttf.changed or fonts_otf.changed
      tags: bin_installation

    # Installs bin files

    - name: Copy programs to /usr/local/bin
      copy:
        src: "{{ src_dir }}/files/local/bin/{{ item }}"
        dest: /usr/local/bin
        remote_src: true
        mode: u=rwx,g=rx,o=rx
      with_items: "{{ local_bin_packages }}"
      tags: bin_installation

    # lazydocker

    - name: finds if lazydocker is already installed
      stat:
        path: /usr/local/bin/lazydocker
      register: lazydocker
      tags: bin_installation

    - name: ensures lazydocker is installed
      shell: >
        set -o pipefail &&
        curl -L -s https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh | bash
      args:
        executable: /bin/bash
      when: not lazydocker.stat.exists
      tags: bin_installation

    # kubectl

    - name: finds if kubectl is already installed
      stat:
        path: /usr/local/bin/kubectl
      register: kubectl
      tags: bin_installation

    - name: ensures kubectl is installed
      shell: >
        set -o pipefail &&
        cd /usr/local/bin &&
        curl -LO -s "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      args:
        executable: /bin/bash
      when: not kubectl.stat.exists
      tags: bin_installation

    # k3d

    - name: finds if k3d is already installed
      stat:
        path: /usr/local/bin/k3d
      register: k3d
      tags: bin_installation

    - name: ensures k3d is installed
      shell: >
        set -o pipefail &&
        curl -L -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
      args:
        executable: /bin/bash
      when: not k3d.stat.exists
      tags: bin_installation

    # kustomize

    - name: finds if kustomize is already installed
      stat:
        path: /usr/local/bin/kustomize
      register: kustomize
      changed_when: false
      tags: bin_installation

    - name: ensures kustomize is installed
      shell: >
        set -o pipefail &&
        cd /usr/local/bin &&
        curl -L -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
      args:
        executable: /bin/bash
      when: not kustomize.stat.exists
      tags: bin_installation

    ### CONFIGURATION PHASE

    - name: Add secondary Groups to user
      user:
        name: "{{ user }}"
        groups: "{{ item }}"
        append: true
      with_items:
        - docker
        - sudo
      tags: configuration

    - name: ensures zsh is the default shell
      user:
        name: "{{ user }}"
        shell: /usr/bin/zsh
      tags: configuration

    - name: Ensures /etc/environment is correct
      copy:
        src: "{{ src_dir }}/files/etc/environment"
        dest: /etc/environment
        remote_src: true
        mode: u=rw,g=r,o=r
      tags: configuration

    # csjt.redejt docker registry configuration

    - name: ensures docker registries are cofigured
      copy:
        src: "{{ src_dir }}/files/etc/docker/docker-daemon.json"
        dest: /etc/docker/daemon.json
        force: false
        remote_src: true
        mode: u=rw,g=rw,o=r
      tags: configuration

    # CERTIFICATION INSTALLATION PHASE

    - name: ensure certificates are downloaded and unzipped
      unarchive:
        src: http://acraiz.icpbrasil.gov.br/credenciadas/CertificadosAC-ICP-Brasil/ACcompactadox.zip
        dest: /usr/local/share/ca-certificates
        remote_src: true
      tags: configuration

    - name: ensure new certificates are added to configured certificates
      command: update-ca-certificates
      tags: configuration

    # update-alternatives

    - name: update-alternatives
      alternatives:
        name: "{{ item.application }}"
        path: "{{ item.path }}"
      loop: "{{ default_apps }}"

    ### OPTIMIZATION PHASE

    - name: ensures Postgresql is not running
      systemd: name=postgresql state=stopped enabled=no
      tags: optimization

    - name: ensures docker is not started
      systemd: name=docker state=stopped enabled=no
      tags: optimization

    - name: updates dconf
      shell: dconf update

    # Clean disk

    - name: Remove dependencies that are no longer required
      apt:
        autoremove: true
      tags: optimization

    - name: Remove useless packages from the cache
      apt:
        autoclean: true
      tags: optimization

    # Disable sshd

    - name: ensures sshd is not enabled
      systemd: name=ssh enabled=no
      tags: configuration

###################################################################################################
### USER WORKSPACE CONFIGURATION PHASE
###################################################################################################

- hosts: workstation
  tags: user
  become: true
  become_user: "{{ user }}"
  become_method: sudo
  # Use --ask-become-pass at command line to give sudo password

  vars:
    pop_os_release: ansible_distribution_release
    user_dir: "{{ lookup('env','HOME') }}"
    user: "{{ lookup('env','USER') }}"
    src_dir: "{{ user_dir }}/{{ relative_dir }}"
    git_email: "{{ git_user_email }}"
    git_name: "{{ git_user_name }}"

  tasks:

    # Configure desktop environment

    - name: ensures local app dir exists
      file:
        path: "{{ user_dir }}/.local/share/applications"
        state: directory
        recurse: true
      tags: local_configuration

    - name: ensures local bin dir exists
      file:
        path: "{{ user_dir }}/.local/bin"
        state: directory
        recurse: true
      tags: local_configuration

    # Exercism

    - name: ensures exercism cli is installed
      shell: >
        set -o pipefail &&
        if [ ! -f "{{ user_dir }}/.local/bin/exercism" ]; then
          curl -L "https://github.com/exercism/cli/releases/download/v3.0.13/exercism-3.0.13-linux-x86_64.tar.gz" |
          tar zxvf - -C "{{ user_dir }}/.local/bin/" --xform='s|.*/||' exercism
        fi
      args:
        executable: /bin/bash
      tags: user_package_installation

    # Shell configuration

    - name: edit username in .zshrc
      replace:
        path: "{{ user_dir }}/.zshrc"
        regexp: "zandao"
        replace: "{{ user }}"
      tags: local_configuration

    # Git user configuration

    - name: ensures git is configured
      command: "{{ item }}"
      with_items:
        - git config --global user.email "{{ git_email }}"
        - git config --global user.name "{{ git_name }}"
        - git config --global credential.helper 'cache --timeout 72000'
        - git config --global delta.line-numbers true
        - git config --global delta.side-by-side true
        - git config --global delta.dark true
        - git config --global core.pager "delta"
        - git config --global core.editor "flatpak run --file-forwarding re.sonny Commit @@"
        - git config --global pull.rebase false
      tags: local_configuration

    # Binary executable download and installations

    - name: define default npm packages to be installed with asdf node
      copy:
        src: "{{ src_dir }}/files/default-npm-packages"
        dest: "{{ user_dir }}/.default-npm-packages"
        force: false
        remote_src: true
        mode: preserve
      tags: user_package_installation

    - name: download asdf
      git:
        repo: https://github.com/asdf-vm/asdf.git
        dest: "{{ user_dir }}/.asdf"
        version: v0.8.1
      tags: user_package_installation

    - name: install asdf plugins and versions
      include_tasks: asdf.yml
      loop: '{{ asdf_plugins }}'
      loop_control:
        loop_var: plugin
      tags: user_package_installation

    # Configures Phoenix

    - name: check Hex
      shell: >
        set -o pipefail &&
        source "{{ user_dir }}/.asdf/asdf.sh" &&
        mix hex
      args:
        executable: /bin/bash
      ignore_errors: true
      changed_when: false
      register: hex
      tags: local_configuration

    - name: ensures Hex is installed
      shell: >
        set -o pipefail &&
        source "{{ user_dir }}/.asdf/asdf.sh" &&
        mix local.hex --force
      args:
        executable: /bin/bash
      when: "'could not be found' in hex.stderr"
      tags: local_configuration

    - name: check Phoenix
      shell: >
        set -o pipefail &&
        source "{{ user_dir }}/.asdf/asdf.sh" &&
        mix phx.new
      args:
        executable: /bin/bash
      ignore_errors: true
      changed_when: false
      register: phx
      tags: local_configuration

    - name: ensures Phoenix is installed
      shell: >
        set -o pipefail &&
        source "{{ user_dir }}/.asdf/asdf.sh" &&
        echo y | mix archive.install hex phx_new 1.6.6
      args:
        executable: /bin/bash
      when: "'could not be found' in phx.stderr"
      tags: local_configuration

    # npm package installation

    - name: ensures npm packages are installed
      shell: >
        set -o pipefail &&
        source "{{ user_dir }}/.asdf/asdf.sh" &&
        asdf reshim &&
        $(asdf which npm) install -g "{{ item.name }}"
      args:
        executable: /bin/bash
      loop: "{{ npm_packages }}"
      tags: local_configuration

    # Configures VSCode

    - name: ensures config directory exists
      file:
        path: "{{ user_dir }}/.config/Code/User"
        state: directory
        recurse: true
      tags: local_configuration

    - name: ensures vscode extensions are installed
      command: code --install-extension "{{ item }}"
      with_items: "{{ vscode_extensions }}"
      tags: user_package_installation

    # Flatpaks

    - name: ensures flatpak packages are present
      flatpak:
        name: "{{ item }}"
        method: user
      with_items: "{{ flatpak_packages }}"
      tags: user_package_installation

    # AppImages configuration

    - name: ensures applications directory exists
      file:
        path: "{{ user_dir }}/Applications"
        state: directory
        mode: '0700'
      tags: local_configuration

    # ACME SSL Certificate Management script

    - name: ensures acme.sh is present
      shell: >
        set -o pipefail &&
        curl https://get.acme.sh | sh -s email="{{ git_email }}"
      args:
        executable: /bin/bash
      tags: local_configuration
