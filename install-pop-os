#!/usr/bin/env bash
# Generated by http://argbash.io/generate
#
# ARG_OPTIONAL_BOOLEAN([transparent-proxy],[t],[configures MITM certificate and all])
# ARG_OPTIONAL_BOOLEAN([add-to-known-hosts],[a],[adds localhost to ssh known_hosts])
# ARG_OPTIONAL_SINGLE([github-user],[],[github user for user/password authentication ])
# ARG_OPTIONAL_SINGLE([github-token],[],[github OAuth2 token for project download],[])
# ARG_OPTIONAL_SINGLE([git-user-email],[],[git config user.email ])
# ARG_OPTIONAL_SINGLE([git-user-name],[],[git config user.name ])
# ARG_OPTIONAL_BOOLEAN([restore-config],[r],[restores configuration from Google Drive])
# ARG_OPTIONAL_BOOLEAN([upgrade],[u],[upgrade all installed software])
# ARG_OPTIONAL_BOOLEAN([debug],[],[shows debug information])
# ARG_OPTIONAL_SINGLE([extra-args],[],[ansible extra arguments],[])
# ARG_HELP([Configure Pop!_OS workstation])
# ARG_VERSION([echo $0 v0.1])
# ARGBASH_SET_INDENT([    ])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
    local _ret="${2:-1}"
    test "${_PRINT_HELP:-no}" = yes && print_help >&2
    echo "$1" >&2
    exit "${_ret}"
}


begins_with_short_option()
{
    local first_option all_short_options='taruhv'
    first_option="${1:0:1}"
    test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_transparent_proxy="off"
_arg_add_to_known_hosts="off"
_arg_github_user=
_arg_github_token=
_arg_git_user_email=
_arg_git_user_name=
_arg_restore_config="off"
_arg_upgrade="off"
_arg_debug="off"
_arg_extra_args=


print_help()
{
    printf '%s\n' "Configure Pop!_OS workstation"
    printf 'Usage: %s [-t|--(no-)transparent-proxy] [-a|--(no-)add-to-known-hosts] [--github-user <arg>] [--github-token <arg>] [--git-user-email <arg>] [--git-user-name <arg>] [-r|--(no-)restore-config] [-u|--(no-)upgrade] [--(no-)debug] [--extra-args <arg>] [-h|--help] [-v|--version]\n' "$0"
    printf '\t%s\n' "-t, --transparent-proxy, --no-transparent-proxy: configures MITM certificate and all (off by default)"
    printf '\t%s\n' "-a, --add-to-known-hosts, --no-add-to-known-hosts: adds localhost to ssh known_hosts (off by default)"
    printf '\t%s\n' "--github-user: github user for user/password authentication  (no default)"
    printf '\t%s\n' "--github-token: github OAuth2 token for project download (no default)"
    printf '\t%s\n' "--git-user-email: git config user.email  (no default)"
    printf '\t%s\n' "--git-user-name: git config user.name  (no default)"
    printf '\t%s\n' "-r, --restore-config, --no-restore-config: restores configuration from Google Drive (off by default)"
    printf '\t%s\n' "-u, --upgrade, --no-upgrade: upgrade all installed software (off by default)"
    printf '\t%s\n' "--debug, --no-debug: shows debug information (off by default)"
    printf '\t%s\n' "--extra-args: ansible extra arguments (no default)"
    printf '\t%s\n' "-h, --help: Prints help"
    printf '\t%s\n' "-v, --version: Prints version"
}


parse_commandline()
{
    while test $# -gt 0
    do
        _key="$1"
        case "$_key" in
            -t|--no-transparent-proxy|--transparent-proxy)
                _arg_transparent_proxy="on"
                test "${1:0:5}" = "--no-" && _arg_transparent_proxy="off"
                ;;
            -t*)
                _arg_transparent_proxy="on"
                _next="${_key##-t}"
                if test -n "$_next" -a "$_next" != "$_key"
                then
                    { begins_with_short_option "$_next" && shift && set -- "-t" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
                fi
                ;;
            -a|--no-add-to-known-hosts|--add-to-known-hosts)
                _arg_add_to_known_hosts="on"
                test "${1:0:5}" = "--no-" && _arg_add_to_known_hosts="off"
                ;;
            -a*)
                _arg_add_to_known_hosts="on"
                _next="${_key##-a}"
                if test -n "$_next" -a "$_next" != "$_key"
                then
                    { begins_with_short_option "$_next" && shift && set -- "-a" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
                fi
                ;;
            --github-user)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_github_user="$2"
                shift
                ;;
            --github-user=*)
                _arg_github_user="${_key##--github-user=}"
                ;;
            --github-token)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_github_token="$2"
                shift
                ;;
            --github-token=*)
                _arg_github_token="${_key##--github-token=}"
                ;;
            --git-user-email)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_git_user_email="$2"
                shift
                ;;
            --git-user-email=*)
                _arg_git_user_email="${_key##--git-user-email=}"
                ;;
            --git-user-name)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_git_user_name="$2"
                shift
                ;;
            --git-user-name=*)
                _arg_git_user_name="${_key##--git-user-name=}"
                ;;
            -r|--no-restore-config|--restore-config)
                _arg_restore_config="on"
                test "${1:0:5}" = "--no-" && _arg_restore_config="off"
                ;;
            -r*)
                _arg_restore_config="on"
                _next="${_key##-r}"
                if test -n "$_next" -a "$_next" != "$_key"
                then
                    { begins_with_short_option "$_next" && shift && set -- "-r" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
                fi
                ;;
            -u|--no-upgrade|--upgrade)
                _arg_upgrade="on"
                test "${1:0:5}" = "--no-" && _arg_upgrade="off"
                ;;
            -u*)
                _arg_upgrade="on"
                _next="${_key##-u}"
                if test -n "$_next" -a "$_next" != "$_key"
                then
                    { begins_with_short_option "$_next" && shift && set -- "-u" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
                fi
                ;;
            --no-debug|--debug)
                _arg_debug="on"
                test "${1:0:5}" = "--no-" && _arg_debug="off"
                ;;
            --extra-args)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_extra_args="$2"
                shift
                ;;
            --extra-args=*)
                _arg_extra_args="${_key##--extra-args=}"
                ;;
            -h|--help)
                print_help
                exit 0
                ;;
            -h*)
                print_help
                exit 0
                ;;
            -v|--version)
                echo $0 v0.1
                exit 0
                ;;
            -v*)
                echo $0 v0.1
                exit 0
                ;;
            *)
                _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
                ;;
        esac
        shift
    done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


ARGBASH_VERSION=2.10.0
PROJECT="after-pop-os-install"
BRANCH=master
playbook='workstation-pop-os.yml'
# shellcheck disable=SC2154
GITHUB_USER=${_arg_github_user}
if [ "$GITHUB_USER" != "" ]; then
    GITHUB_USER_AT="${GITHUB_USER}@"
fi
GITHUB_URL="https://${GITHUB_USER_AT}github.com/$GIT_HUB_USER/$PROJECT.git"
ASCIIART_HEIGHT=26

PROJECT_DIR="$HOME/$PROJECT"
SCRIPT_NAME=$(basename "$0")
DIR="$(dirname "$(realpath "$0")")"
RELATIVE_DIR=$(realpath "$DIR" --relative-to "$HOME")
INSTALL_TEMP=$(mktemp -d $PROJECT.XXX)

trap "rm -rf -- $INSTALL_TEMP" EXIT

export PYTHONHTTPSVERIFY=0

# shellcheck disable=SC2174
mkdir --mode=0777 --parents "$INSTALL_TEMP"

# ANSI terminal control functions
#################################

function save_cursor_position {
    tput sc
}

function restore_cursor_position {
    tput rc
}

function reverse_color {
    brgb 255 255 255
    frgb 0 0 0
}

function brgb {
    printf "\33\13348;2;%d;%d;%dm" "$1" "$2" "$3"
}

function frgb {
    printf "\33\13338;2;%d;%d;%dm" "$1" "$2" "$3"
}

function red {
    frgb 255 0 0
}

function green {
    frgb 0 255 0
}

function bold {
    tput bold
}

function start_underline {
    tput smul
}

function end_underline {
    tput rmul
}

function start_italic {
    tput sitm
}

function end_italic {
    tput ritm
}

function reset_color {
    tput setab 0
    tput setaf 15
}

function reset_all {
    tput sgr0
}

function pause {
    read -rsn1 -p"$1"; echo
}

function writexy {
    printf "\33\133%d;%dH%s" "$2" "$1" "$3"
}

function msg {
    green
    echo "$1"
    reset_color
}

function msgerror {
    red
    echo "$1"
    reset_color
}

function lineoffset {
    lines_in_file=$1
    max_lines=$(tput lines)
    y_offset=$((max_lines - lines_in_file))
    echo $y_offset
}

function configure_terminal {
    sudo apt-get --yes install wmctrl
    sleep 2
    wmctrl -r :ACTIVE: -b add,maximized_vert,maximized_horz
    sleep 1
}

# Pre-installation - functions
###############################################################################

# ANSIBLE
#########
function install_ansible {
    if ! type -P ansible ; then
        msg "Installing ansible dependencies"
        sudo apt install -y -q software-properties-common openssh-server sshpass
        msg "Installing ansible..."
        sudo apt install -y -q ansible python3-pip
        sudo pip3 install --trusted-host pypi.python.org --trusted-host files.pythonhosted.org \
            --trusted-host pypi.org art==4.1
	sudo mkdir -p /etc/ansible/roles
	sudo ansible-galaxy install --roles-path /etc/ansible/roles cimon-io.asdf
	ansible-galaxy collection install --force-with-deps --ignore-certs community.general
	ansible-galaxy collection install --force-with-deps --ignore-certs ansible.posix
    fi
}

# ANSIBLE HOSTS
###############
function install_ansible_hosts {
    if grep -Fxq "[workstation]" /etc/ansible/hosts ; then
        msg "/etc/ansible/hosts already configured"
    else
        msg "Configuring ansible..."
        sudo mkdir -p /etc/ansible
        sudo sh -c "echo '[workstation]' > /etc/ansible/hosts"
        sudo sh -c "echo 'localhost' >> /etc/ansible/hosts"
        sudo sh -c "echo >> /etc/ansible/hosts"
        sudo sh -c "echo '[all:vars]' >> /etc/ansible/hosts"
        sudo sh -c "echo 'ansible_connection=ssh' >> /etc/ansible/hosts"
        sudo sh -c "echo ansible_user=$USER >> /etc/ansible/hosts"
        sudo sh -c "echo '[defaults]' > /etc/ansible/ansible.cfg"
        sudo sh -c "echo 'stdout_callback = debug' >> /etc/ansible/ansible.cfg"
	msg "Ansible configured"
    fi
}

# _argbash (manter em minusculas)
##########
function install_argbash {
    if ! type -P argbash ; then
        sudo apt install -y -q autoconf
        pushd "$INSTALL_TEMP" || echo "It may seem crazy, but $INSTALL_TEMP directory doesn't exist! 😱"
        wget --no-check-certificate -O argbash-${ARGBASH_VERSION}.tar.gz https://github.com/matejak/argbash/archive/refs/tags/${ARGBASH_VERSION}.tar.gz
        tar zxvf argbash-${ARGBASH_VERSION}.tar.gz
        cd argbash-${ARGBASH_VERSION}/resources || echo "argbash not correctly downloaded"
        sudo make install PREFIX=/usr
        popd || echo "I'll be back"
        sudo rm -rf "$INSTALL_TEMP/argbash-${ARGBASH_VERSION}*"
        msg "Argbash installed"
    else
        msg "Argbash is already installed"
    fi
}

# GIT
#####
function install_git {
    if ! type -P git ; then
        sudo apt -y -q install git
    else
        msg "Vim already installed"
    fi
}

# known_hosts
#############
function add_to_known_hosts {
    msg "Removing localhost from ssh known_hosts"
    ssh-keygen -f "$HOME/.ssh/known_hosts" -R "localhost"
    msg "Adding localhost to ssh known_hosts"
    [ ! -f "$HOME/.ssh/known_hosts" ] && touch "$HOME/.ssh/known_hosts"
    localhost_key=$(ssh-keyscan -H localhost)
    if ! grep "$localhost_key" "$HOME/.ssh/known_hosts" ; then
        echo "$localhost_key" >> "$HOME/.ssh/known_hosts"
        sudo bash -c "[! -d /root/.ssh] && mkdir /root/.ssh && cp $HOME/.ssh/known_hosts /root/.ssh && chown root:root /root/.ssh/known_hosts"
    else
        msg "known_hosts already configured"
    fi
}

# TRANSPARENT PROXY
###################
function configure_proxy {
    if [ ! -f /usr/local/share/ca-certificates/man-in-the-middle.crt ]; then
        msg "Getting man in the middle certificate"
        openssl s_client -connect www.google.com:443  -showcerts | sudo openssl x509 --inform der -in - -out /usr/local/share/ca-certificates/man-in-the-middle.crt
        for f in $PROJECT_DIR/files/x509/*.cer
        do
          sudo openssl x509 -inform der -in $f -out /usr/local/share/ca-certificates/$(basename $f .cer).crt
        done
        sudo cp $PROJECT_DIR/files/x509/*.crt /usr/local/share/ca-certificates
        sudo update-ca-certificates && sudo systemctl daemon-reload
    else
        msg "man-in-the-middle already enabled"
    fi
}

# VIM
#####
function install_vim {
    if ! type -P vim ; then
        sudo apt -y -q install vim
    else
        msg "Vim already installed"
    fi
}

# Check if project is downloaded and downloads it
#################################################

function clone_project_if_needed {
    if [ "$RELATIVE_DIR" != "$PROJECT" ] ; then
        if [ ! -d "$PROJECT_DIR" ]; then
            # shellcheck disable=SC2154
            if [ "$_arg_github_token" != "" ] ; then
                GITHUB_TOKEN="$_arg_github_token"
            fi
            msg "Starting download"
	    git clone -b $BRANCH --single-branch "$GITHUB_URL"
            error=$?
            if (( $error != 0 )) ; then
                msgerror "Error $error during project download"
                exit $error
            fi
            mv "$HOME/$SCRIPT_NAME" "$PROJECT_DIR/$SCRIPT_NAME"
        fi
        cd "$PROJECT_DIR" || echo "$PROJECT_DIR doesn't exist"
        "$PROJECT_DIR/$SCRIPT_NAME" "$@"
        exit $?
    fi
}

# Beggining the way
###############################################################################

clone_project_if_needed

sudo apt install imagemagick

echo
./files/local/bin/tiv ./files/images/The-Good.png

configure_terminal

# Reading needed password for sudo
###############################################################################

# Making sudo to cache password
bold
green
echo
sudo echo
echo
reset_all

# shellcheck disable=SC2181
if [ $? -gt 0 ] ; then
  exit $?
fi

bold
green
read -p "Enter $USER password again: " -r -s pw
echo
reset_color

packages_without_correction=$(dpkg --list | wc --lines)
packages_before=$(( packages_without_correction + 1))

# shellcheck disable=SC2154
if [ "$_arg_transparent_proxy" = "on" ] ; then
    configure_proxy
fi

# shellcheck disable=SC2154
if [ "$_arg_upgrade" = "on" ] ; then
    echo
    echo '               ##        ##  ##                                 ##'
    echo '## ##          ##        ##  ##                                 ##'
    echo '## ##          ##        ##                                     ##'
    echo '## ## ####   ####  #### #### ## # ##   ####   ####   ####  #### ## ## ####  ####  ###   ###'
    echo '## ## ## ## ## ## ## ##  ##  ## ## ## ## ##   ## ## ## ## ##    #### ## ## ## ## ## ## ##'
    echo '## ## ## ## ## ## ## ##  ##  ## ## ## ## ##   ## ## ## ## ##    ###  ## ## ## ## #####  ###'
    echo '## ## ## ## ## ## ## ##  ##  ## ## ## ## ##   ## ## ## ## ##    #### ## ## ## ## ##       ##'
    echo ' ###  ####   ####  ## #   ## ## ## ##  ####   ####   ## #  #### ## ## ## #  ####  ###  ####'
    echo '      ##                                 ##   ##                              ##'
    echo '      ##                               ###    ##                            ###'
    sudo apt update
    sudo apt upgrade -y
fi

# Pre-installation - execution
###############################################################################
echo ' '
./files/local/bin/tiv files/images/The-Bad.png
sleep 3

echo
echo
echo
echo '               ##       ## ##  ##                                 ## ##    ##'
echo '##             ##       ## ##  ##                                 ## ##    ##'
echo '##             ##       ## ##                                        ##    ##'
echo '## # ##   ### #### #### ## ##  ## # ##   ####    #### # ##   ###  ## ####  ##  ###'
echo '## ## ## ##    ## ## ## ## ##  ## ## ## ## ##   ## ## ## ## ##    ## ## ## ## ## ##'
echo '## ## ##  ###  ## ## ## ## ##  ## ## ## ## ##   ## ## ## ##  ###  ## ## ## ## #####'
echo '## ## ##    ## ## ## ## ## ##  ## ## ## ## ##   ## ## ## ##    ## ## ## ## ## ##'
echo '## ## ## ####   ## ## #  ## ## ## ## ##  ####    ## # ## ## ####  ## ####   ## ###'
echo '                                           ##'
echo '                                         ###'
install_ansible
install_ansible_hosts

echo
echo
echo
echo '               ##       ## ##  ##                                ##                ##'
echo '##             ##       ## ##  ##                                ##                ##'
echo '##             ##       ## ##                                    ##                ##'
echo '## # ##   ### #### #### ## ##  ## # ##   ####    #### # ### #### ####   ####  ###  ####'
echo '## ## ## ##    ## ## ## ## ##  ## ## ## ## ##   ## ## ###  ## ## ## ## ## ## ##    ## ##'
echo '## ## ##  ###  ## ## ## ## ##  ## ## ## ## ##   ## ## ##   ## ## ## ## ## ##  ###  ## ##'
echo '## ## ##    ## ## ## ## ## ##  ## ## ## ## ##   ## ## ##   ## ## ## ## ## ##    ## ## ##'
echo '## ## ## ####   ## ## #  ## ## ## ## ##  ####    ## # ##    #### ####   ## # ####  ## ##'
echo '                                           ##                 ##'
echo '                                         ###                ###'
install_argbash

echo
echo
echo
echo '               ##       ## ##  ##                     ##'
echo '##             ##       ## ##  ##                     ##'
echo '##             ##       ## ##'
echo '## # ##   ### #### #### ## ##  ## # ##   ####   ## ## ## ## #'
echo '## ## ## ##    ## ## ## ## ##  ## ## ## ## ##   ## ## ## #####'
echo '## ## ##  ###  ## ## ## ## ##  ## ## ## ## ##   ## ## ## #####'
echo '## ## ##    ## ## ## ## ## ##  ## ## ## ## ##    ###  ## #####'
echo '## ## ## ####   ## ## #  ## ## ## ## ##  ####     #   ## ## ##'
echo '                                           ##'
echo '                                         ###'
install_vim

echo
echo
echo
echo '               ##       ## ##  ##                     ##  ##'
echo '##             ##       ## ##  ##                     ##  ##'
echo '##             ##       ## ##                             ##'
echo '## # ##   ### #### #### ## ##  ## # ##   ####    #### ## ####'
echo '## ## ## ##    ## ## ## ## ##  ## ## ## ## ##   ## ## ##  ##'
echo '## ## ##  ###  ## ## ## ## ##  ## ## ## ## ##   ## ## ##  ##'
echo '## ## ##    ## ## ## ## ## ##  ## ## ## ## ##   ## ## ##  ##'
echo '## ## ## ####   ## ## #  ## ## ## ## ##  ####    #### ##   ##'
echo '                                           ##      ##'
echo '                                         ###     ###'
install_git

# Installation of Google Drive packages
###############################################################################

# shellcheck disable=SC2154
if [ "$_arg_restore_config" = "on" ] ; then
    echo
    echo
    echo
    echo '               ##       ## ##  ##                                       ##'
    echo '##             ##       ## ##  ##                ###                    ##'
    echo '##             ##       ## ##                   ## ##                   ##'
    echo '## # ##   ### #### #### ## ##  ## # ##   ####   ##     ###   ###   #### ##  ###'
    echo '## ## ## ##    ## ## ## ## ##  ## ## ## ## ##   ##### ## ## ## ## ## ## ## ## ##'
    echo '## ## ##  ###  ## ## ## ## ##  ## ## ## ## ##   ## ## ## ## ## ## ## ## ## #####'
    echo '## ## ##    ## ## ## ## ## ##  ## ## ## ## ##   ## ## ## ## ## ## ## ## ## ##'
    echo '## ## ## ####   ## ## #  ## ## ## ## ##  ####    ####  ###   ###   ####  ## ###'
    echo '                                           ##                        ##'
    echo '            ##                           ###   ##                  ###'
    echo '####        ##                                 ##'
    echo '## ##                                          ##'
    echo '## ## # ### ## ## ##  ###    ####   ####  #### ## ## ####  ####  ###   ###'
    echo '## ## ###   ## ## ## ## ##   ## ## ## ## ##    #### ## ## ## ## ## ## ##'
    echo '## ## ##    ## ## ## #####   ## ## ## ## ##    ###  ## ## ## ## #####  ###'
    echo '## ## ##    ##  ###  ##      ## ## ## ## ##    #### ## ## ## ## ##       ##'
    echo '####  ##    ##   #    ###    ####   ## #  #### ## ## ## #  ####  ###  ####'
    echo '                             ##                              ##'
    echo '                             ##                            ###'

    [[ ! -d ~/.config/gdrive-package ]] && mkdir ~/.config/gdrive-package
    if [ -f ~/Download/*-credentials.json ] || [ -f ~/Downloads/*-token.pickle ] ; then
      cp ~/Downloads/*-credentials.json ~/.config/gdrive-package
      mv ~/Downloads/*-credentials.json ~/.config/gdrive-package/${USER}-credentials.json
      cp ~/Downloads/*-token.pickle ~/.config/gdrive-package
      mv ~/Downloads/*-token.pickle ~/.config/gdrive-package/${USER}-token.pickle
    fi

    sudo apt install -y python3-pip
    sudo pip3 install gdrive-tools

    echo
    bold
    green
    read -p "Enter password to install encrypted packages: " -r -s restore_config_key
    echo
    reset_all

    pushd "$PROJECT_DIR/files" > /dev/null || echo "Directory $PROJECT_DIR/files doesn't exist"
    msg "Installing fonts Google Drive package"
    "$PROJECT_DIR/gdrive-package.py" install fonts
    msg "Installing deb Google Drive package"
    "$PROJECT_DIR/gdrive-package.py" install deb
    msg "Installing home-config Google Drive package"
    "$PROJECT_DIR/gdrive-package.py" install home-config
    msg "Installing vscode Google Drive package"
    "$PROJECT_DIR/gdrive-package.py" install vscode
    msg "Installing documents Google Drive package"
    "$PROJECT_DIR/gdrive-package.py" install documents
    msg "Installing shell Google Drive package"
    "$PROJECT_DIR/gdrive-package.py" install shell

    if [ "$restore_config_key" != "" ] ; then
        msg "Installing shell-encoded Google Drive package"
        "$PROJECT_DIR/gdrive-package.py" --encryption-key "$restore_config_key" install shell-encoded
        msg "Installing Telegram Desktop Google Drive package"
        "$PROJECT_DIR/gdrive-package.py" --encryption-key "$restore_config_key" install telegram-encoded
        msg "Installing home-encrypted Google Drive package"
        "$PROJECT_DIR/gdrive-package.py" --encryption-key "$restore_config_key" install home-encoded
        msg "Installing IRPF Google Drive package"
        "$PROJECT_DIR/gdrive-package.py" --encryption-key "$restore_config_key" install IRPF
        msg "Installing files/security Google Drive package"
        "$PROJECT_DIR/gdrive-package.py" --encryption-key "$restore_config_key" install security
    fi
    popd || echo "I'll be back"
fi

echo
echo
echo
echo '                   ###                     ##                          ##'
echo ' ###              ##  ##                   ##                          ##'
echo '## ##             ##                                                   ##'
echo '##     ###  # ## #### ##  #### ## ## # ### ## # ##   ####    ###  ###  ####'
echo '##    ## ## ## ## ##  ## ## ## ## ## ###   ## ## ## ## ##   ##   ##    ## ##'
echo '##    ## ## ## ## ##  ## ## ## ## ## ##    ## ## ## ## ##    ###  ###  ## ##'
echo '## ## ## ## ## ## ##  ## ## ## ## ## ##    ## ## ## ## ##      ##   ## ## ##'
echo ' ###   ###  ## ## ##  ##  ####  ## # ##    ## ## ##  ####   #### ####  ## ##'
echo '                  #         ##                         ##'
echo '                          ###                        ###'

# shellcheck disable=SC2154
if [ "$_arg_add_to_known_hosts" = "on" ] ; then
    add_to_known_hosts
fi
msg "Starting sshd server"
sudo systemctl start sshd

# shellcheck disable=SC2154
if [ "$_arg_debug" = "on" ] ; then
    debug='--verbose'
else
    debug=''
fi

sleep 1

yoffset=$(lineoffset $ASCIIART_HEIGHT)
./files/local/bin/tiv -h $ASCIIART_HEIGHT files/images/feeling_lucky.jpg
save_cursor_position
reverse_color
writexy 38 $((yoffset + 1)) "😃 I'm feeling"
writexy 38 $((yoffset + 2)) "lucky today..."
writexy 16 $((yoffset + 4)) "YEAH! GO FOR IT, FRY!"
writexy 18 $((yoffset + 5)) "hehehe 😈"
bold
writexy 69 $((yoffset + 5)) "BENDER, YOU"
writexy 70 $((yoffset + 6)) "ARE RIGHT!"
reset_all
reverse_color
writexy 70 $((yoffset + 7)) "What could"
writexy 71 $((yoffset + 8)) "possibly"
writexy 71 $((yoffset + 9)) "go wrong?"
restore_cursor_position
reverse_color
red
printf '         "𝘼𝙗𝙖𝙣𝙙𝙤𝙣 𝙖𝙡𝙡 𝙝𝙤𝙥𝙚, 𝙮𝙚 𝙬𝙝𝙤 𝙚𝙣𝙩𝙚𝙧 𝙝𝙚𝙧𝙚." Inferno (Dante)            '
echo
reset_all
pause " I mean, press any key to continue the ugly part of the installation..."

# Installation with ansible
###############################################################################

# 🤪 This part is the result of pure fun to do,
# I was tired of serious programming 🥱
###############################################################################

echo ' '
echo ' '
./files/local/bin/tiv files/images/The-Ugly.png
sleep 2

TAGS=$(ansible-playbook $playbook --list-tags | awk -vFS='[' -vRS=']' '!visited[$2]++ {gsub(" ","", $0); gsub("always,", "", $0); if ($2 !~ /^$/) {print $2}}' | tr '\n' ',')${TAGS}

# shellcheck disable=SC2086
ansible-playbook $debug --ssh-extra-args='-o "PubkeyAuthentication=no" -o StrictHostKeyChecking=no' \
  "$playbook" --user="$USER" --tags "$TAGS" $_arg_extra_args \
  -e "relative_dir=$RELATIVE_DIR ansible_ssh_pass=\"$pw\" ansible_become_pass=\"$pw\" ansible_user=$USER ansible_become_method=sudo  git_user_email=\"${_arg_git_user_email:-unknown_user@unknown_domain}\" git_user_name=\"${_arg_git_user_name:-John Doe}\""

# shellcheck disable=SC2181
if [ $? -gt 0 ] ; then
    ./files/local/bin/tiv files/images/feature.jpg
    exit 1
fi

# END OF IT ALL, FINALLY!
###############################################################################

packages_after=$(dpkg --list | wc --lines)
installed_packages=$((packages_after - packages_before))

yoffset=$(lineoffset $ASCIIART_HEIGHT)
$PROJECT_DIR/files/local/bin/tiv -h $ASCIIART_HEIGHT $PROJECT_DIR/files/images/speech_balloon_with_avatar.png
save_cursor_position
reverse_color
writexy 7 $((yoffset + 2)) "Installed packages after this: $installed_packages"

writexy 22 $((yoffset + 4))                 'Execute'
writexy 5 $((yoffset + 6)) 'to start vpn and "snx -d" to disconnect'
start_italic
writexy 5 $((yoffset + 5)) '"snx -s 192.100.177.1 -u <your vpn user>"'
writexy 22 $((yoffset + 6)) '"snx -d"'
end_italic

writexy 6 $((yoffset + 8)) "Please read TODO-POP-OS.md immediatelly"

writexy 7 $((yoffset + 10)) "|__| _    _   _    _ . _ _   _| _   |"
writexy 7 $((yoffset + 11)) "|  |(_|\/(-  (_|  | )|(_(-  (_|(_|\/."
writexy 41 $((yoffset + 12))                                  "/"

bold
green
writexy 38 $((yoffset + 2)) "$installed_packages"
red
start_underline
writexy 18 $((yoffset + 8)) "TODO-POP-OS.md"

restore_cursor_position
reset_all

# ] <-- needed because of Argbash
